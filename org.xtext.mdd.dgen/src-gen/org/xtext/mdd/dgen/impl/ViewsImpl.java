/**
 * generated by Xtext 2.25.0
 */
package org.xtext.mdd.dgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.mdd.dgen.DgenPackage;
import org.xtext.mdd.dgen.ViewGroup;
import org.xtext.mdd.dgen.ViewOptions;
import org.xtext.mdd.dgen.Views;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Views</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.mdd.dgen.impl.ViewsImpl#getViewGroup <em>View Group</em>}</li>
 *   <li>{@link org.xtext.mdd.dgen.impl.ViewsImpl#getViewOption <em>View Option</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ViewsImpl extends MinimalEObjectImpl.Container implements Views
{
  /**
   * The cached value of the '{@link #getViewGroup() <em>View Group</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getViewGroup()
   * @generated
   * @ordered
   */
  protected ViewGroup viewGroup;

  /**
   * The cached value of the '{@link #getViewOption() <em>View Option</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getViewOption()
   * @generated
   * @ordered
   */
  protected EList<ViewOptions> viewOption;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ViewsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DgenPackage.Literals.VIEWS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ViewGroup getViewGroup()
  {
    return viewGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetViewGroup(ViewGroup newViewGroup, NotificationChain msgs)
  {
    ViewGroup oldViewGroup = viewGroup;
    viewGroup = newViewGroup;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DgenPackage.VIEWS__VIEW_GROUP, oldViewGroup, newViewGroup);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setViewGroup(ViewGroup newViewGroup)
  {
    if (newViewGroup != viewGroup)
    {
      NotificationChain msgs = null;
      if (viewGroup != null)
        msgs = ((InternalEObject)viewGroup).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DgenPackage.VIEWS__VIEW_GROUP, null, msgs);
      if (newViewGroup != null)
        msgs = ((InternalEObject)newViewGroup).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DgenPackage.VIEWS__VIEW_GROUP, null, msgs);
      msgs = basicSetViewGroup(newViewGroup, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DgenPackage.VIEWS__VIEW_GROUP, newViewGroup, newViewGroup));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ViewOptions> getViewOption()
  {
    if (viewOption == null)
    {
      viewOption = new EObjectContainmentEList<ViewOptions>(ViewOptions.class, this, DgenPackage.VIEWS__VIEW_OPTION);
    }
    return viewOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DgenPackage.VIEWS__VIEW_GROUP:
        return basicSetViewGroup(null, msgs);
      case DgenPackage.VIEWS__VIEW_OPTION:
        return ((InternalEList<?>)getViewOption()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DgenPackage.VIEWS__VIEW_GROUP:
        return getViewGroup();
      case DgenPackage.VIEWS__VIEW_OPTION:
        return getViewOption();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DgenPackage.VIEWS__VIEW_GROUP:
        setViewGroup((ViewGroup)newValue);
        return;
      case DgenPackage.VIEWS__VIEW_OPTION:
        getViewOption().clear();
        getViewOption().addAll((Collection<? extends ViewOptions>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DgenPackage.VIEWS__VIEW_GROUP:
        setViewGroup((ViewGroup)null);
        return;
      case DgenPackage.VIEWS__VIEW_OPTION:
        getViewOption().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DgenPackage.VIEWS__VIEW_GROUP:
        return viewGroup != null;
      case DgenPackage.VIEWS__VIEW_OPTION:
        return viewOption != null && !viewOption.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ViewsImpl
